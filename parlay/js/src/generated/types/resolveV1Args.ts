/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { NonZeroU32, NonZeroU32Args } from "../../hooked/nonzero";
import type {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from "@metaplex-foundation/umi/serializers";

import { array, dataEnum, i8, struct, u8, unit } from "@metaplex-foundation/umi/serializers";

import { getNonZeroU32Serializer } from "../../hooked/nonzero";

export type ResolveV1Args =
  | { __kind: "Invalid" }
  | {
      __kind: "Outcomes";
      outcomes: Array<number>;
      highScore: number;
      winners: NonZeroU32;
    };

export type ResolveV1ArgsArgs =
  | { __kind: "Invalid" }
  | {
      __kind: "Outcomes";
      outcomes: Array<number>;
      highScore: number;
      winners: NonZeroU32Args;
    };

export function getResolveV1ArgsSerializer(): Serializer<ResolveV1ArgsArgs, ResolveV1Args> {
  return dataEnum<ResolveV1Args>(
    [
      ["Invalid", unit()],
      [
        "Outcomes",
        struct<GetDataEnumKindContent<ResolveV1Args, "Outcomes">>([
          ["outcomes", array(i8(), { size: u8() })],
          ["highScore", u8()],
          ["winners", getNonZeroU32Serializer()],
        ]),
      ],
    ],
    { description: "ResolveV1Args" },
  ) as Serializer<ResolveV1ArgsArgs, ResolveV1Args>;
}

// Data Enum Helpers.
export function resolveV1Args(kind: "Invalid"): GetDataEnumKind<ResolveV1ArgsArgs, "Invalid">;
export function resolveV1Args(
  kind: "Outcomes",
  data: GetDataEnumKindContent<ResolveV1ArgsArgs, "Outcomes">,
): GetDataEnumKind<ResolveV1ArgsArgs, "Outcomes">;
export function resolveV1Args<K extends ResolveV1ArgsArgs["__kind"]>(
  kind: K,
  data?: any,
): Extract<ResolveV1ArgsArgs, { __kind: K }> {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function isResolveV1Args<K extends ResolveV1Args["__kind"]>(
  kind: K,
  value: ResolveV1Args,
): value is ResolveV1Args & { __kind: K } {
  return value.__kind === kind;
}
