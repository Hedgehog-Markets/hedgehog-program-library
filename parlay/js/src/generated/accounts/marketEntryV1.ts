/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  array,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u32,
  u8,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type MarketEntryV1 = Account<MarketEntryV1AccountData>;

export interface MarketEntryV1AccountData {
  accountType: AccountType;
  market: PublicKey;
  index: number;
  wallet: PublicKey;
  claimed: boolean;
  outcomes: Array<number>;
}

export interface MarketEntryV1AccountDataArgs {
  market: PublicKey;
  index: number;
  wallet: PublicKey;
  claimed: boolean;
  outcomes: Array<number>;
}

export function getMarketEntryV1AccountDataSerializer(): Serializer<
  MarketEntryV1AccountDataArgs,
  MarketEntryV1AccountData
> {
  return mapSerializer<MarketEntryV1AccountDataArgs, any, MarketEntryV1AccountData>(
    struct<MarketEntryV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["market", publicKeySerializer()],
        ["index", u32()],
        ["wallet", publicKeySerializer()],
        ["claimed", bool()],
        ["outcomes", array(u8(), { size: u8() })],
      ],
      { description: "MarketEntryV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.MarketEntryV1 }),
  );
}

export function deserializeMarketEntryV1(rawAccount: RpcAccount): MarketEntryV1 {
  return deserializeAccount(rawAccount, getMarketEntryV1AccountDataSerializer());
}

export async function fetchMarketEntryV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<MarketEntryV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "MarketEntryV1");
  return deserializeMarketEntryV1(maybeAccount);
}

export async function safeFetchMarketEntryV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<MarketEntryV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeMarketEntryV1(maybeAccount) : null;
}

export async function fetchAllMarketEntryV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<MarketEntryV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "MarketEntryV1");
    return deserializeMarketEntryV1(maybeAccount);
  });
}

export async function safeFetchAllMarketEntryV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<MarketEntryV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMarketEntryV1(maybeAccount as RpcAccount));
}

export function getMarketEntryV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hplParlay",
    "PLYaNRbQs9GWyVQdcLrzPvvZu7NH4W2sneyHcEimLr7",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      market: PublicKey;
      index: number;
      wallet: PublicKey;
      claimed: boolean;
      outcomes: Array<number>;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      market: [1, publicKeySerializer()],
      index: [33, u32()],
      wallet: [37, publicKeySerializer()],
      claimed: [69, bool()],
      outcomes: [70, array(u8(), { size: u8() })],
    })
    .deserializeUsing<MarketEntryV1>((account) => deserializeMarketEntryV1(account))
    .whereField("accountType", AccountType.MarketEntryV1);
}

export function findMarketEntryV1Pda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the market. */
    market: PublicKey;
    /** The index of the entry in the market. */
    index: number;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "hplParlay",
    "PLYaNRbQs9GWyVQdcLrzPvvZu7NH4W2sneyHcEimLr7",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("market_entry"),
    publicKeySerializer().serialize(seeds.market),
    u32().serialize(seeds.index),
  ]);
}

export async function fetchMarketEntryV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findMarketEntryV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<MarketEntryV1> {
  return fetchMarketEntryV1(context, findMarketEntryV1Pda(context, seeds), options);
}

export async function safeFetchMarketEntryV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findMarketEntryV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<MarketEntryV1 | null> {
  return safeFetchMarketEntryV1(context, findMarketEntryV1Pda(context, seeds), options);
}
