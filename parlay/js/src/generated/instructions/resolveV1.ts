/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { ResolveV1Args, ResolveV1ArgsArgs } from "../types";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { findAssociatedTokenPda } from "@metaplex-foundation/mpl-toolbox";
import { publicKey, transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findDepositPda, findLuloUserPda } from "../../hooked";
import { findConfigV1Pda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";
import { getResolveV1ArgsSerializer } from "../types";

// Accounts.
export interface ResolveV1InstructionAccounts {
  /** Config */
  config?: PublicKey | Pda;
  /** Market */
  market: PublicKey | Pda;
  /** Resolver */
  resolver: Signer;
  /** Deposit token mint */
  mint: PublicKey | Pda;
  /** Deposit token account */
  deposit?: PublicKey | Pda;
  /** LULO user account */
  luloUser?: PublicKey | Pda;
  /** LULO deposit token account */
  luloDeposit?: PublicKey | Pda;
  /** LULO promotion reserve */
  luloPromotionReserve?: PublicKey | Pda;
  /** Payer */
  payer?: Signer;
  /** LULO program */
  luloProgram?: PublicKey | Pda;
  /** SPL associated token program */
  ataProgram?: PublicKey | Pda;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
}

// Data.
export interface ResolveV1InstructionData {
  discriminator: number;
  resolveV1Args: ResolveV1Args;
}

export interface ResolveV1InstructionDataArgs {
  resolveV1Args: ResolveV1ArgsArgs;
}

export function getResolveV1InstructionDataSerializer(): Serializer<
  ResolveV1InstructionDataArgs,
  ResolveV1InstructionData
> {
  return mapSerializer<ResolveV1InstructionDataArgs, any, ResolveV1InstructionData>(
    struct<ResolveV1InstructionData>(
      [
        ["discriminator", u8()],
        ["resolveV1Args", getResolveV1ArgsSerializer()],
      ],
      { description: "ResolveV1InstructionData" },
    ),
    (value) => ({ ...value, discriminator: 4 }),
  );
}

// Args.
export type ResolveV1InstructionArgs = ResolveV1InstructionDataArgs;

// Instruction.
export function resolveV1(
  context: Pick<Context, "eddsa" | "payer" | "programs">,
  input: ResolveV1InstructionAccounts & ResolveV1InstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "hplParlay",
    "PLYaNRbQs9GWyVQdcLrzPvvZu7NH4W2sneyHcEimLr7",
  );

  // Accounts.
  const resolvedAccounts = {
    config: {
      index: 0,
      isWritable: true as boolean,
      value: input.config ?? null,
    },
    market: {
      index: 1,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    resolver: {
      index: 2,
      isWritable: false as boolean,
      value: input.resolver ?? null,
    },
    mint: { index: 3, isWritable: false as boolean, value: input.mint ?? null },
    deposit: {
      index: 4,
      isWritable: true as boolean,
      value: input.deposit ?? null,
    },
    luloUser: {
      index: 5,
      isWritable: true as boolean,
      value: input.luloUser ?? null,
    },
    luloDeposit: {
      index: 6,
      isWritable: true as boolean,
      value: input.luloDeposit ?? null,
    },
    luloPromotionReserve: {
      index: 7,
      isWritable: true as boolean,
      value: input.luloPromotionReserve ?? null,
    },
    payer: {
      index: 8,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    luloProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.luloProgram ?? null,
    },
    ataProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.ataProgram ?? null,
    },
    tokenProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ResolveV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = findConfigV1Pda(context);
  }
  if (!resolvedAccounts.deposit.value) {
    resolvedAccounts.deposit.value = findDepositPda(context, {
      market: expectPublicKey(resolvedAccounts.market.value),
    });
  }
  if (!resolvedAccounts.luloUser.value) {
    resolvedAccounts.luloUser.value = findLuloUserPda(context, {
      owner: expectPublicKey(resolvedAccounts.config.value),
    });
  }
  if (!resolvedAccounts.luloDeposit.value) {
    resolvedAccounts.luloDeposit.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
      owner: expectPublicKey(resolvedAccounts.luloUser.value),
    });
  }
  if (!resolvedAccounts.luloPromotionReserve.value) {
    resolvedAccounts.luloPromotionReserve.value = publicKey(
      "4NCKkwUCBRcu7TGxDaEZ6Uw6TvzdDbnvSuYbXLzrLnzv",
    );
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.luloProgram.value) {
    resolvedAccounts.luloProgram.value = context.programs.getPublicKey(
      "lulo",
      "FL3X2pRsQ9zHENpZSKDRREtccwJuei8yg9fwDu9UN69Q",
    );
    resolvedAccounts.luloProgram.isWritable = false;
  }
  if (!resolvedAccounts.ataProgram.value) {
    resolvedAccounts.ataProgram.value = context.programs.getPublicKey(
      "splAssociatedToken",
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
    );
    resolvedAccounts.ataProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getResolveV1InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
