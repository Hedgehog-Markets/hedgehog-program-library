/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { Bps, BpsArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from "@metaplex-foundation/umi/serializers";

import { getBpsSerializer } from "../types";

export type GlobalState = Account<GlobalStateAccountData>;

export type GlobalStateAccountData = {
  discriminator: Uint8Array;
  swapFee: Bps;
  feeWallet: PublicKey;
  authority: PublicKey;
  nonce: number;
};

export type GlobalStateAccountDataArgs = {
  swapFee: BpsArgs;
  feeWallet: PublicKey;
  authority: PublicKey;
  nonce: number;
};

export function getGlobalStateAccountDataSerializer(): Serializer<
  GlobalStateAccountDataArgs,
  GlobalStateAccountData
> {
  return mapSerializer<GlobalStateAccountDataArgs, any, GlobalStateAccountData>(
    struct<GlobalStateAccountData>(
      [
        ["discriminator", bytes({ size: 8 })],
        ["swapFee", getBpsSerializer()],
        ["feeWallet", publicKeySerializer()],
        ["authority", publicKeySerializer()],
        ["nonce", u8()],
      ],
      { description: "GlobalStateAccountData" },
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([163, 46, 74, 168, 216, 123, 133, 98]),
    }),
  );
}

export function deserializeGlobalState(rawAccount: RpcAccount): GlobalState {
  return deserializeAccount(rawAccount, getGlobalStateAccountDataSerializer());
}

export async function fetchGlobalState(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<GlobalState> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "GlobalState");
  return deserializeGlobalState(maybeAccount);
}

export async function safeFetchGlobalState(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<GlobalState | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeGlobalState(maybeAccount) : null;
}

export async function fetchAllGlobalState(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<GlobalState>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "GlobalState");
    return deserializeGlobalState(maybeAccount);
  });
}

export async function safeFetchAllGlobalState(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<GlobalState>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGlobalState(maybeAccount as RpcAccount));
}

export function getGlobalStateGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      swapFee: BpsArgs;
      feeWallet: PublicKey;
      authority: PublicKey;
      nonce: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      swapFee: [8, getBpsSerializer()],
      feeWallet: [10, publicKeySerializer()],
      authority: [42, publicKeySerializer()],
      nonce: [74, u8()],
    })
    .deserializeUsing<GlobalState>((account) => deserializeGlobalState(account))
    .whereField("discriminator", new Uint8Array([163, 46, 74, 168, 216, 123, 133, 98]));
}

export function getGlobalStateSize(): number {
  return 75;
}

export function findGlobalStatePda(context: Pick<Context, "eddsa" | "programs">): Pda {
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );
  return context.eddsa.findPda(programId, [string({ size: "variable" }).serialize("global")]);
}

export async function fetchGlobalStateFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<GlobalState> {
  return fetchGlobalState(context, findGlobalStatePda(context), options);
}

export async function safeFetchGlobalStateFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<GlobalState | null> {
  return safeFetchGlobalState(context, findGlobalStatePda(context), options);
}
