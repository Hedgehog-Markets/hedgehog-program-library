/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";

export type CreatorMetadata = Account<CreatorMetadataAccountData>;

export type CreatorMetadataAccountData = {
  discriminator: Uint8Array;
  nextIndex: bigint;
  creator: PublicKey;
  nonce: number;
};

export type CreatorMetadataAccountDataArgs = {
  nextIndex: number | bigint;
  creator: PublicKey;
  nonce: number;
};

export function getCreatorMetadataAccountDataSerializer(): Serializer<
  CreatorMetadataAccountDataArgs,
  CreatorMetadataAccountData
> {
  return mapSerializer<CreatorMetadataAccountDataArgs, any, CreatorMetadataAccountData>(
    struct<CreatorMetadataAccountData>(
      [
        ["discriminator", bytes({ size: 8 })],
        ["nextIndex", u64()],
        ["creator", publicKeySerializer()],
        ["nonce", u8()],
      ],
      { description: "CreatorMetadataAccountData" },
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([169, 211, 87, 164, 219, 12, 210, 160]),
    }),
  );
}

export function deserializeCreatorMetadata(rawAccount: RpcAccount): CreatorMetadata {
  return deserializeAccount(rawAccount, getCreatorMetadataAccountDataSerializer());
}

export async function fetchCreatorMetadata(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<CreatorMetadata> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "CreatorMetadata");
  return deserializeCreatorMetadata(maybeAccount);
}

export async function safeFetchCreatorMetadata(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<CreatorMetadata | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeCreatorMetadata(maybeAccount) : null;
}

export async function fetchAllCreatorMetadata(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<CreatorMetadata>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "CreatorMetadata");
    return deserializeCreatorMetadata(maybeAccount);
  });
}

export async function safeFetchAllCreatorMetadata(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<CreatorMetadata>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCreatorMetadata(maybeAccount as RpcAccount));
}

export function getCreatorMetadataGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      nextIndex: number | bigint;
      creator: PublicKey;
      nonce: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      nextIndex: [8, u64()],
      creator: [16, publicKeySerializer()],
      nonce: [48, u8()],
    })
    .deserializeUsing<CreatorMetadata>((account) => deserializeCreatorMetadata(account))
    .whereField("discriminator", new Uint8Array([169, 211, 87, 164, 219, 12, 210, 160]));
}

export function getCreatorMetadataSize(): number {
  return 49;
}

export function findCreatorMetadataPda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the swap creator. */
    creator: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );
  return context.eddsa.findPda(programId, [publicKeySerializer().serialize(seeds.creator)]);
}

export async function fetchCreatorMetadataFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findCreatorMetadataPda>[1],
  options?: RpcGetAccountOptions,
): Promise<CreatorMetadata> {
  return fetchCreatorMetadata(context, findCreatorMetadataPda(context, seeds), options);
}

export async function safeFetchCreatorMetadataFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findCreatorMetadataPda>[1],
  options?: RpcGetAccountOptions,
): Promise<CreatorMetadata | null> {
  return safeFetchCreatorMetadata(context, findCreatorMetadataPda(context, seeds), options);
}
