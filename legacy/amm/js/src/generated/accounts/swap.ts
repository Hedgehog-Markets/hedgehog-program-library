/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { SwapFees, SwapFeesArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u128,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";

import { getSwapFeesSerializer } from "../types";

export type Swap = Account<SwapAccountData>;

export type SwapAccountData = {
  discriminator: Uint8Array;
  market: PublicKey;
  underlyingSwap: PublicKey;
  creator: PublicKey;
  fees: SwapFees;
  index: bigint;
  volume: bigint;
  nonce: number;
};

export type SwapAccountDataArgs = {
  market: PublicKey;
  underlyingSwap: PublicKey;
  creator: PublicKey;
  fees: SwapFeesArgs;
  index: number | bigint;
  volume: number | bigint;
  nonce: number;
};

export function getSwapAccountDataSerializer(): Serializer<SwapAccountDataArgs, SwapAccountData> {
  return mapSerializer<SwapAccountDataArgs, any, SwapAccountData>(
    struct<SwapAccountData>(
      [
        ["discriminator", bytes({ size: 8 })],
        ["market", publicKeySerializer()],
        ["underlyingSwap", publicKeySerializer()],
        ["creator", publicKeySerializer()],
        ["fees", getSwapFeesSerializer()],
        ["index", u64()],
        ["volume", u128()],
        ["nonce", u8()],
      ],
      { description: "SwapAccountData" },
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([53, 206, 146, 152, 44, 97, 120, 177]),
    }),
  );
}

export function deserializeSwap(rawAccount: RpcAccount): Swap {
  return deserializeAccount(rawAccount, getSwapAccountDataSerializer());
}

export async function fetchSwap(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Swap> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "Swap");
  return deserializeSwap(maybeAccount);
}

export async function safeFetchSwap(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Swap | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeSwap(maybeAccount) : null;
}

export async function fetchAllSwap(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Swap>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "Swap");
    return deserializeSwap(maybeAccount);
  });
}

export async function safeFetchAllSwap(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Swap>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeSwap(maybeAccount as RpcAccount));
}

export function getSwapGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      market: PublicKey;
      underlyingSwap: PublicKey;
      creator: PublicKey;
      fees: SwapFeesArgs;
      index: number | bigint;
      volume: number | bigint;
      nonce: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      market: [8, publicKeySerializer()],
      underlyingSwap: [40, publicKeySerializer()],
      creator: [72, publicKeySerializer()],
      fees: [104, getSwapFeesSerializer()],
      index: [116, u64()],
      volume: [124, u128()],
      nonce: [140, u8()],
    })
    .deserializeUsing<Swap>((account) => deserializeSwap(account))
    .whereField("discriminator", new Uint8Array([53, 206, 146, 152, 44, 97, 120, 177]));
}

export function getSwapSize(): number {
  return 141;
}

export function findSwapPda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the swap creator. */
    creator: PublicKey;
    /** The index of the swap in the creator metadata. */
    index: number | bigint;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );
  return context.eddsa.findPda(programId, [
    publicKeySerializer().serialize(seeds.creator),
    u64().serialize(seeds.index),
  ]);
}

export async function fetchSwapFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findSwapPda>[1],
  options?: RpcGetAccountOptions,
): Promise<Swap> {
  return fetchSwap(context, findSwapPda(context, seeds), options);
}

export async function safeFetchSwapFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findSwapPda>[1],
  options?: RpcGetAccountOptions,
): Promise<Swap | null> {
  return safeFetchSwap(context, findSwapPda(context, seeds), options);
}
