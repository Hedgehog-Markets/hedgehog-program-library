/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import { bytes, mapSerializer, struct, u64 } from "@metaplex-foundation/umi/serializers";

import { getAccountMetasAndSigners } from "../shared";

// Accounts.
export type AddLiquidityInstructionAccounts = {
  swap: PublicKey | Pda;
  creatorMetadata: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  swapProgram?: PublicKey | Pda;
  underlyingSwap: PublicKey | Pda;
  swapAuthority: PublicKey | Pda;
  userTransferAuthority: Signer;
  depositTokenA: PublicKey | Pda;
  depositTokenB: PublicKey | Pda;
  swapTokenA: PublicKey | Pda;
  swapTokenB: PublicKey | Pda;
  poolMint: PublicKey | Pda;
  destination: PublicKey | Pda;
};

// Data.
export type AddLiquidityInstructionData = {
  discriminator: Uint8Array;
  poolTokenAmount: bigint;
  maximumTokenAAmount: bigint;
  maximumTokenBAmount: bigint;
};

export type AddLiquidityInstructionDataArgs = {
  poolTokenAmount: number | bigint;
  maximumTokenAAmount: number | bigint;
  maximumTokenBAmount: number | bigint;
};

export function getAddLiquidityInstructionDataSerializer(): Serializer<
  AddLiquidityInstructionDataArgs,
  AddLiquidityInstructionData
> {
  return mapSerializer<AddLiquidityInstructionDataArgs, any, AddLiquidityInstructionData>(
    struct<AddLiquidityInstructionData>(
      [
        ["discriminator", bytes({ size: 8 })],
        ["poolTokenAmount", u64()],
        ["maximumTokenAAmount", u64()],
        ["maximumTokenBAmount", u64()],
      ],
      { description: "AddLiquidityInstructionData" },
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([181, 157, 89, 67, 143, 182, 52, 72]),
    }),
  );
}

// Args.
export type AddLiquidityInstructionArgs = AddLiquidityInstructionDataArgs;

// Instruction.
export function addLiquidity(
  context: Pick<Context, "programs">,
  input: AddLiquidityInstructionAccounts & AddLiquidityInstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );

  // Accounts.
  const resolvedAccounts = {
    swap: { index: 0, isWritable: false as boolean, value: input.swap ?? null },
    creatorMetadata: {
      index: 1,
      isWritable: false as boolean,
      value: input.creatorMetadata ?? null,
    },
    tokenProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    swapProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    underlyingSwap: {
      index: 4,
      isWritable: false as boolean,
      value: input.underlyingSwap ?? null,
    },
    swapAuthority: {
      index: 5,
      isWritable: false as boolean,
      value: input.swapAuthority ?? null,
    },
    userTransferAuthority: {
      index: 6,
      isWritable: false as boolean,
      value: input.userTransferAuthority ?? null,
    },
    depositTokenA: {
      index: 7,
      isWritable: true as boolean,
      value: input.depositTokenA ?? null,
    },
    depositTokenB: {
      index: 8,
      isWritable: true as boolean,
      value: input.depositTokenB ?? null,
    },
    swapTokenA: {
      index: 9,
      isWritable: true as boolean,
      value: input.swapTokenA ?? null,
    },
    swapTokenB: {
      index: 10,
      isWritable: true as boolean,
      value: input.swapTokenB ?? null,
    },
    poolMint: {
      index: 11,
      isWritable: true as boolean,
      value: input.poolMint ?? null,
    },
    destination: {
      index: 12,
      isWritable: true as boolean,
      value: input.destination ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: AddLiquidityInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.swapProgram.value) {
    resolvedAccounts.swapProgram.value = context.programs.getPublicKey(
      "hhTokenSwap",
      "2ZznCMfx2XP43zaPw9R9wKnjXWiEeEexyhdBPv3UqDtD",
    );
    resolvedAccounts.swapProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getAddLiquidityInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
