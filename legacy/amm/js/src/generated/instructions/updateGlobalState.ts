/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import {
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u16,
} from "@metaplex-foundation/umi/serializers";

import { findGlobalStatePda } from "../accounts";
import { getAccountMetasAndSigners } from "../shared";

// Accounts.
export type UpdateGlobalStateInstructionAccounts = {
  globalState?: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type UpdateGlobalStateInstructionData = {
  discriminator: Uint8Array;
  swapFee: number;
  feeWallet: PublicKey;
  newAuthority: PublicKey;
};

export type UpdateGlobalStateInstructionDataArgs = {
  swapFee: number;
  feeWallet: PublicKey;
  newAuthority: PublicKey;
};

export function getUpdateGlobalStateInstructionDataSerializer(): Serializer<
  UpdateGlobalStateInstructionDataArgs,
  UpdateGlobalStateInstructionData
> {
  return mapSerializer<UpdateGlobalStateInstructionDataArgs, any, UpdateGlobalStateInstructionData>(
    struct<UpdateGlobalStateInstructionData>(
      [
        ["discriminator", bytes({ size: 8 })],
        ["swapFee", u16()],
        ["feeWallet", publicKeySerializer()],
        ["newAuthority", publicKeySerializer()],
      ],
      { description: "UpdateGlobalStateInstructionData" },
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([72, 50, 207, 20, 119, 37, 44, 182]),
    }),
  );
}

// Args.
export type UpdateGlobalStateInstructionArgs = UpdateGlobalStateInstructionDataArgs;

// Instruction.
export function updateGlobalState(
  context: Pick<Context, "eddsa" | "identity" | "programs">,
  input: UpdateGlobalStateInstructionAccounts & UpdateGlobalStateInstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "hhAmm",
    "Hr4whNgXr3yZsJvx3TVSwfsFgXuSEPB1xKmvgrtLhsrM",
  );

  // Accounts.
  const resolvedAccounts = {
    globalState: {
      index: 0,
      isWritable: true as boolean,
      value: input.globalState ?? null,
    },
    authority: {
      index: 1,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateGlobalStateInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.globalState.value) {
    resolvedAccounts.globalState.value = findGlobalStatePda(context);
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getUpdateGlobalStateInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
