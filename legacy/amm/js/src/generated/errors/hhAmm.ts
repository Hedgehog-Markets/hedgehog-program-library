/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { Program } from "@metaplex-foundation/umi";

import { ProgramError } from "@metaplex-foundation/umi";

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap = new Map<number, ProgramErrorConstructor>();
const nameToErrorMap = new Map<string, ProgramErrorConstructor>();

/** CastError: Cast error occurred. */
export class CastErrorError extends ProgramError {
  override readonly name: string = "CastError";

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super("Cast error occurred.", program, cause);
  }
}
codeToErrorMap.set(0x1770, CastErrorError);
nameToErrorMap.set("CastError", CastErrorError);

/** Overflow: Numerical overflow occurred. */
export class OverflowError extends ProgramError {
  override readonly name: string = "Overflow";

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super("Numerical overflow occurred.", program, cause);
  }
}
codeToErrorMap.set(0x1771, OverflowError);
nameToErrorMap.set("Overflow", OverflowError);

/** IncorrectUnderlyingSwap: The underlying swap is incorrect. */
export class IncorrectUnderlyingSwapError extends ProgramError {
  override readonly name: string = "IncorrectUnderlyingSwap";

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super("The underlying swap is incorrect.", program, cause);
  }
}
codeToErrorMap.set(0x1772, IncorrectUnderlyingSwapError);
nameToErrorMap.set("IncorrectUnderlyingSwap", IncorrectUnderlyingSwapError);

/** IncorrectMarket: The market is incorrect. */
export class IncorrectMarketError extends ProgramError {
  override readonly name: string = "IncorrectMarket";

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super("The market is incorrect.", program, cause);
  }
}
codeToErrorMap.set(0x1773, IncorrectMarketError);
nameToErrorMap.set("IncorrectMarket", IncorrectMarketError);

/** InvalidOutcomeToken: Outcome token does not exist for this market. */
export class InvalidOutcomeTokenError extends ProgramError {
  override readonly name: string = "InvalidOutcomeToken";

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super("Outcome token does not exist for this market.", program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidOutcomeTokenError);
nameToErrorMap.set("InvalidOutcomeToken", InvalidOutcomeTokenError);

/** SlippageTooHigh: Slippage was too high. */
export class SlippageTooHighError extends ProgramError {
  override readonly name: string = "SlippageTooHigh";

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super("Slippage was too high.", program, cause);
  }
}
codeToErrorMap.set(0x1775, SlippageTooHighError);
nameToErrorMap.set("SlippageTooHigh", SlippageTooHighError);

/** FeesTooLarge: Fees can't exceed 100%. */
export class FeesTooLargeError extends ProgramError {
  override readonly name: string = "FeesTooLarge";

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super("Fees can't exceed 100%.", program, cause);
  }
}
codeToErrorMap.set(0x1776, FeesTooLargeError);
nameToErrorMap.set("FeesTooLarge", FeesTooLargeError);

/** IncorrectSwapAccountMints: The underlying swap account mints do not match the market. */
export class IncorrectSwapAccountMintsError extends ProgramError {
  override readonly name: string = "IncorrectSwapAccountMints";

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super("The underlying swap account mints do not match the market.", program, cause);
  }
}
codeToErrorMap.set(0x1777, IncorrectSwapAccountMintsError);
nameToErrorMap.set("IncorrectSwapAccountMints", IncorrectSwapAccountMintsError);

/** IncorrectUpgradeAuthority: Upgrade authority address does not match the program upgrade authority. */
export class IncorrectUpgradeAuthorityError extends ProgramError {
  override readonly name: string = "IncorrectUpgradeAuthority";

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super(
      "Upgrade authority address does not match the program upgrade authority.",
      program,
      cause,
    );
  }
}
codeToErrorMap.set(0x1778, IncorrectUpgradeAuthorityError);
nameToErrorMap.set("IncorrectUpgradeAuthority", IncorrectUpgradeAuthorityError);

/** MissingUpgradeAuthority: Missing amm program upgrade authority. */
export class MissingUpgradeAuthorityError extends ProgramError {
  override readonly name: string = "MissingUpgradeAuthority";

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super("Missing amm program upgrade authority.", program, cause);
  }
}
codeToErrorMap.set(0x1779, MissingUpgradeAuthorityError);
nameToErrorMap.set("MissingUpgradeAuthority", MissingUpgradeAuthorityError);

/** IncorrectProgramData: Program data address does not match the program data. */
export class IncorrectProgramDataError extends ProgramError {
  override readonly name: string = "IncorrectProgramData";

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super("Program data address does not match the program data.", program, cause);
  }
}
codeToErrorMap.set(0x177a, IncorrectProgramDataError);
nameToErrorMap.set("IncorrectProgramData", IncorrectProgramDataError);

/** MissingProgramData: Missing amm program data address. */
export class MissingProgramDataError extends ProgramError {
  override readonly name: string = "MissingProgramData";

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super("Missing amm program data address.", program, cause);
  }
}
codeToErrorMap.set(0x177b, MissingProgramDataError);
nameToErrorMap.set("MissingProgramData", MissingProgramDataError);

/** IncorrectGlobalStateAuthority: Authority address does not match the global state authority. */
export class IncorrectGlobalStateAuthorityError extends ProgramError {
  override readonly name: string = "IncorrectGlobalStateAuthority";

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super("Authority address does not match the global state authority.", program, cause);
  }
}
codeToErrorMap.set(0x177c, IncorrectGlobalStateAuthorityError);
nameToErrorMap.set("IncorrectGlobalStateAuthority", IncorrectGlobalStateAuthorityError);

/** IncorrectMarketCollateral: The market collateral is incorrect. */
export class IncorrectMarketCollateralError extends ProgramError {
  override readonly name: string = "IncorrectMarketCollateral";

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super("The market collateral is incorrect.", program, cause);
  }
}
codeToErrorMap.set(0x177d, IncorrectMarketCollateralError);
nameToErrorMap.set("IncorrectMarketCollateral", IncorrectMarketCollateralError);

/** IncorrectProtocolFeeAccount: The protocol fee account is incorrect. */
export class IncorrectProtocolFeeAccountError extends ProgramError {
  override readonly name: string = "IncorrectProtocolFeeAccount";

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super("The protocol fee account is incorrect.", program, cause);
  }
}
codeToErrorMap.set(0x177e, IncorrectProtocolFeeAccountError);
nameToErrorMap.set("IncorrectProtocolFeeAccount", IncorrectProtocolFeeAccountError);

/** ZeroPoolAmount: The pool amount is zero. */
export class ZeroPoolAmountError extends ProgramError {
  override readonly name: string = "ZeroPoolAmount";

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super("The pool amount is zero.", program, cause);
  }
}
codeToErrorMap.set(0x177f, ZeroPoolAmountError);
nameToErrorMap.set("ZeroPoolAmount", ZeroPoolAmountError);

/** SwapAccountZero: Swap account has zero balance. */
export class SwapAccountZeroError extends ProgramError {
  override readonly name: string = "SwapAccountZero";

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super("Swap account has zero balance.", program, cause);
  }
}
codeToErrorMap.set(0x1780, SwapAccountZeroError);
nameToErrorMap.set("SwapAccountZero", SwapAccountZeroError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getHhAmmErrorFromCode(
  code: number,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getHhAmmErrorFromName(
  name: string,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
