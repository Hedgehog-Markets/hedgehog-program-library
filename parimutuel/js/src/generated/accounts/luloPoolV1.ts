/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { AccountType, AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import { string, struct, u64 } from "@metaplex-foundation/umi/serializers";

import { getAccountTypeSerializer } from "../types";

export type LuloPoolV1 = Account<LuloPoolV1AccountData>;

export type LuloPoolV1AccountData = {
  accountType: AccountType;
  amount: bigint;
};

export type LuloPoolV1AccountDataArgs = {
  accountType: AccountTypeArgs;
  amount: number | bigint;
};

export function getLuloPoolV1AccountDataSerializer(): Serializer<
  LuloPoolV1AccountDataArgs,
  LuloPoolV1AccountData
> {
  return struct<LuloPoolV1AccountData>(
    [
      ["accountType", getAccountTypeSerializer()],
      ["amount", u64()],
    ],
    { description: "LuloPoolV1AccountData" },
  ) as Serializer<LuloPoolV1AccountDataArgs, LuloPoolV1AccountData>;
}

export function deserializeLuloPoolV1(rawAccount: RpcAccount): LuloPoolV1 {
  return deserializeAccount(rawAccount, getLuloPoolV1AccountDataSerializer());
}

export async function fetchLuloPoolV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<LuloPoolV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "LuloPoolV1");
  return deserializeLuloPoolV1(maybeAccount);
}

export async function safeFetchLuloPoolV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<LuloPoolV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeLuloPoolV1(maybeAccount) : null;
}

export async function fetchAllLuloPoolV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<LuloPoolV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "LuloPoolV1");
    return deserializeLuloPoolV1(maybeAccount);
  });
}

export async function safeFetchAllLuloPoolV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<LuloPoolV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeLuloPoolV1(maybeAccount as RpcAccount));
}

export function getLuloPoolV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );
  return gpaBuilder(context, programId)
    .registerFields<{ accountType: AccountTypeArgs; amount: number | bigint }>({
      accountType: [0, getAccountTypeSerializer()],
      amount: [1, u64()],
    })
    .deserializeUsing<LuloPoolV1>((account) => deserializeLuloPoolV1(account));
}

export function getLuloPoolV1Size(): number {
  return 9;
}

export function findLuloPoolV1Pda(context: Pick<Context, "eddsa" | "programs">): Pda {
  const programId = context.programs.getPublicKey(
    "hplParimutuel",
    "PARrVs6F5egaNuz8g6pKJyU4ze3eX5xGZCFb3GLiVvu",
  );
  return context.eddsa.findPda(programId, [string({ size: "variable" }).serialize("pool")]);
}

export async function fetchLuloPoolV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<LuloPoolV1> {
  return fetchLuloPoolV1(context, findLuloPoolV1Pda(context), options);
}

export async function safeFetchLuloPoolV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<LuloPoolV1 | null> {
  return safeFetchLuloPoolV1(context, findLuloPoolV1Pda(context), options);
}
