/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { ClusterFilter, Context, Program, PublicKey } from "@metaplex-foundation/umi";

import { getHplP2pErrorFromCode, getHplP2pErrorFromName } from "../errors";

export const HPL_P2P_PROGRAM_ID =
  "P2PzLraW8YF87BxqZTZ5kgrfvzcrKGPnqUBNhqmcV9B" as PublicKey<"P2PzLraW8YF87BxqZTZ5kgrfvzcrKGPnqUBNhqmcV9B">;

export function createHplP2pProgram(): Program {
  return {
    name: "hplP2p",
    publicKey: HPL_P2P_PROGRAM_ID,
    getErrorFromCode(code: number, cause?: Error) {
      return getHplP2pErrorFromCode(code, this, cause);
    },
    getErrorFromName(name: string, cause?: Error) {
      return getHplP2pErrorFromName(name, this, cause);
    },
    isOnCluster() {
      return true;
    },
  };
}

export function getHplP2pProgram<T extends Program = Program>(
  context: Pick<Context, "programs">,
  clusterFilter?: ClusterFilter,
): T {
  return context.programs.get<T>("hplP2p", clusterFilter);
}

export function getHplP2pProgramId(
  context: Pick<Context, "programs">,
  clusterFilter?: ClusterFilter,
): PublicKey {
  return context.programs.getPublicKey("hplP2p", HPL_P2P_PROGRAM_ID, clusterFilter);
}
