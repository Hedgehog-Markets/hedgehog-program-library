/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Amount,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapAmountSerializer,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type ConfigV1 = Account<ConfigV1AccountData>;

export type ConfigV1AccountData = {
  accountType: AccountType;
  authority: PublicKey;
  platformFee: Amount<"%", 2>;
};

export type ConfigV1AccountDataArgs = {
  authority: PublicKey;
  platformFee: Amount<"%", 2>;
};

export function getConfigV1AccountDataSerializer(): Serializer<
  ConfigV1AccountDataArgs,
  ConfigV1AccountData
> {
  return mapSerializer<ConfigV1AccountDataArgs, any, ConfigV1AccountData>(
    struct<ConfigV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["authority", publicKeySerializer()],
        ["platformFee", mapAmountSerializer(u16(), "%", 2)],
      ],
      { description: "ConfigV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.ConfigV1 }),
  );
}

export function deserializeConfigV1(rawAccount: RpcAccount): ConfigV1 {
  return deserializeAccount(rawAccount, getConfigV1AccountDataSerializer());
}

export async function fetchConfigV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<ConfigV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "ConfigV1");
  return deserializeConfigV1(maybeAccount);
}

export async function safeFetchConfigV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<ConfigV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeConfigV1(maybeAccount) : null;
}

export async function fetchAllConfigV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<ConfigV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "ConfigV1");
    return deserializeConfigV1(maybeAccount);
  });
}

export async function safeFetchAllConfigV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<ConfigV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeConfigV1(maybeAccount as RpcAccount));
}

export function getConfigV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "hplP2p",
    "P2PzLraW8YF87BxqZTZ5kgrfvzcrKGPnqUBNhqmcV9B",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      authority: PublicKey;
      platformFee: Amount<"%", 2>;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      authority: [1, publicKeySerializer()],
      platformFee: [33, mapAmountSerializer(u16(), "%", 2)],
    })
    .deserializeUsing<ConfigV1>((account) => deserializeConfigV1(account))
    .whereField("accountType", AccountType.ConfigV1);
}

export function getConfigV1Size(): number {
  return 35;
}

export function findConfigV1Pda(context: Pick<Context, "eddsa" | "programs">): Pda {
  const programId = context.programs.getPublicKey(
    "hplP2p",
    "P2PzLraW8YF87BxqZTZ5kgrfvzcrKGPnqUBNhqmcV9B",
  );
  return context.eddsa.findPda(programId, [string({ size: "variable" }).serialize("config")]);
}

export async function fetchConfigV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<ConfigV1> {
  return fetchConfigV1(context, findConfigV1Pda(context), options);
}

export async function safeFetchConfigV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<ConfigV1 | null> {
  return safeFetchConfigV1(context, findConfigV1Pda(context), options);
}
